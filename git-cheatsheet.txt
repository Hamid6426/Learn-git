git commands

git init
git status, status of files if they are add / commited or not
git branch, show branches
git branch branch-first_name/branch-second_name , create a new branch
git branch feat/add-create-table-reference, switch to this branch
* main, shows that you are on the main branch and any commit will be effective
git diff, show changes with light yellow color
git add filename.abc , staging a file, done before commit
git commit -a (all)
git commit -m "Describing the commit"
git log, show the author, time, and the commited change chronologically
git log --oneline
git merge feat/add-create-table-reference, merge changes from this branch
git branch -d feat/add-create-table-reference, delete the branch after merging
git checkout -b branch, Create and switch to a new branch 
q (Quit the git status dashboard and others)

git rebase main, go to a branch but there is already the right code so rebase the main branch so that you can start from the right code
REBASE in simple terms should mean something like "increase height of walls when you have a few foot before" 
git rebase --continue , when conflict show up, discussed down there in a paragraph

git stash. Stash your changes so you can add them to a different branch.
git stash list, list all stashed changes
git stash pop, re-add the stashed changes
git stash show, log of changes due to stash
git stash show -p, p = patch
git stash apply, copy the change instead of pop
stash@{0} is the latest if there are more than 1 stash
git stash show stash@{1}
git stash show -p stash@{1}
git stash drop
git stash drop stash@{1}

git stash is opposite of git stash pop. git stash pop is nothing without git stash

git reset HEAD~1
git revert HEAD

git show
git show HEAD-1

git rebase --interactive HEAD~2
git rebase --interactive HEAD~5

git log --oneline
git log -1
git log -5 --oneline

The process is to create a branch, make the changes you want, commit them, and then merge the changes into branch you started on. Pretty simple

You created this branch and made a commit. Since then, a commit for a bug fix was added to main. This is common with many people working on a codebase simultaneously. You need to update this branch so it has the same commits from main, but you can't just merge that branch into this one. You need that bug fix commit to be in the same order here as it is on main, right after the "drop table" commit. You need to rebase this branch against main to do that. Enter git rebase main to rebase this branch.

Another commit was added to main, you should update this branch again. To be more specific, a rebase will "rewind" this branch to where it last matched main, then, add the commits from main that aren't here. After that, it adds the commits you made to this branch on top. rebase this branch against main so it's up to date. You should see a conflict...

The conflict arose because the first commit you added to this branch changed the same lines as the commit from main. So it tried to add the commit, but couldn't because something was already there. There are sections, separated by characters (<, >, and =), that represent the commit you are on (HEAD) and the commit that is trying to be added (feat: add column reference). Fix the conflict by removing those <, >, and = characters. Then making the JSON object valid again.

I'm going to show you a few ways to remove or undo a commit. The first is to simply "travel back in time". You can use the git reset command to travel to any point in your commit history. Your current HEAD is a reference to the last commit you just made. Use git reset HEAD~1 to go back one before HEAD.

This is a "mixed" reset and will put the changes from the commit you undid in your working tree. You can see that it says there's unstaged changes after the reset to your file. View your log with the oneline flag.

unique change is gone because it was unstaged
and
the changes from the reset are back in the working tree. So when you reset to one commit before HEAD, it removed the most recent commit, and put all the changes in the working tree. If you used the --hard flag with the reset, the changes would have not been added to the working tree and if you used the --soft flag, the changes would have been added to the working tree and to staging. Add the changes back to staging so you can commit them again.

Reverting is a good way to undo a commit because you don't lose the commit from the history. You can revert the most recent commit (HEAD) with git revert HEAD. Do that now.

If you look at the bottom of those two messages, it shows the diff. The diff of the revert commit is the exact opposite of the one before it. Effectively, undoing the changes. You've used rebase to update this branch, but you can enter an "interactive" mode to manipulate commits. Type git rebase --interactive HEAD~2 into the terminal to enter this mode. The HEAD~2 means you will have a chance to change the last two commits.

At the top of Nano, you can see the two commits with pick next to them. Below them, there's a list of options for working with them. pick means that it will use the commits as they were. At the bottom, it says, d, drop = remove commit. Replace the word pick preceeding your two commits with a d to drop them both. When you are done, save the file and exit Nano.

Both, the commit to add the unique command and the one to revert it, were dropped. Enter another --interactive rebase that goes back to the --root instead of HEAD~2. I am going to show you how to change a commit message. --root means that the rebase will go back to your very first commit.

You can see that the latest commit is at the bottom here. Be careful not to change the wrong commits. One of the options is r, reword = use commit, but edit the commit message. Replace pick with an r next to the commit with the message feat: add column reference to reword the message, it's the very first commit you added to this branch. When you are done, save the file and exit Nano. Git will put you in another Nano instance to reword the commit message. Don't change anything in it yet.

The message was reworded, but there's a problem. Look at the commit hash for your Initial commit from the last two times you viewed the log, it's that string left of the log. They aren't the same anymore since you rebased back to the root. Same goes for the rest of the commits. When you rebase interactively it changes all those hashes, so git sees them as different commits. If you were to try and merge this into main, it wouldn't work because they don't share the same history anymore. For this reason, you don't want to do an interactive rebase where you go back passed commits unique to the branch you are on. Fortunately, you can fix this. Enter git rebase main to realign the history of the two branches.
